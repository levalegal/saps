from PyQt6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                             QTableWidget, QTableWidgetItem, QPushButton, QLineEdit,
                             QTreeWidget, QTreeWidgetItem, QSplitter, QMessageBox,
                             QFileDialog, QLabel, QComboBox, QMenu, QGraphicsOpacityEffect)
from PyQt6.QtCore import Qt, QTimer, QPropertyAnimation, QEasingCurve
from PyQt6.QtGui import QPixmap, QAction, QDesktopServices
from .modern_widgets import ModernSearchBox, IconButton, AnimatedButton, ModernCard
from .styles import get_main_stylesheet
from database.database import Database
from database.models import Employee
from auth.auth import AuthManager
from utils.export_import import ExportImport
from utils.qr_generator import QRGenerator
from utils.card_generator import CardGenerator
from utils.export_json import JSONExporter
from utils.backup_manager import BackupManager
from utils.settings_manager import SettingsManager
from database.cache import DataCache
from .dialogs import AddEditEmployeeDialog, AddDepartmentDialog
from .employee_card import EmployeeCard
from .statistics_widget import StatisticsWidget
from .advanced_search_dialog import AdvancedSearchDialog
from .settings_dialog import SettingsDialog
from .backup_dialog import BackupDialog
import webbrowser
from datetime import datetime

class MainWindow(QMainWindow):
    def __init__(self, database: Database, auth_manager: AuthManager):
        super().__init__()
        try:
            import logging
            logger = logging.getLogger(__name__)
            
            logger.info("MainWindow: Initializing...")
            self.database = database
            self.auth_manager = auth_manager
            
            logger.info("MainWindow: Creating managers...")
            self.settings_manager = SettingsManager()
            self.backup_manager = BackupManager('employees.db')
            self.export_import = ExportImport(database)
            self.qr_generator = QRGenerator()
            self.card_generator = CardGenerator()
            self.json_exporter = JSONExporter()
            
            cache_ttl = self.settings_manager.get('cache_ttl', 300)
            self.cache = DataCache(ttl_seconds=cache_ttl)
            
            self.current_employees = []
            
            logger.info("MainWindow: Setting up UI...")
            self.init_ui()
            logger.info("MainWindow: Loading data...")
            self.load_data()
            logger.info("MainWindow: Checking birthdays...")
            self.check_birthdays()
            logger.info("MainWindow: Initialization complete!")
        except Exception as e:
            import traceback
            import logging
            logger = logging.getLogger(__name__)
            error_msg = f"MainWindow __init__ error: {str(e)}\n{traceback.format_exc()}"
            logger.error(error_msg, exc_info=True)
            raise
    
    def init_ui(self):
        self.setWindowTitle('üë• Employee Directory')
        self.setGeometry(100, 100, 1400, 850)
        
        self.create_menu_bar()
        self.create_toolbar()
        self.setup_shortcuts()
        self.apply_modern_styles()
        self.statusBar().showMessage('‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ F1 –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏')
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–∫–Ω–∞
        self.fade_in_animation()
        
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        main_layout = QHBoxLayout()
        
        splitter = QSplitter(Qt.Orientation.Horizontal)
        
        left_panel = self.create_left_panel()
        splitter.addWidget(left_panel)
        
        center_panel = self.create_center_panel()
        splitter.addWidget(center_panel)
        
        right_panel = QSplitter(Qt.Orientation.Vertical)
        
        self.employee_card_widget = QWidget()
        self.employee_card_layout = QVBoxLayout()
        self.employee_card_widget.setLayout(self.employee_card_layout)
        right_panel.addWidget(self.employee_card_widget)
        
        self.statistics_widget = StatisticsWidget(self.database)
        self.statistics_widget.setMaximumHeight(300)
        right_panel.addWidget(self.statistics_widget)
        
        right_panel.setSizes([400, 300])
        splitter.addWidget(right_panel)
        
        splitter.setSizes([250, 600, 400])
        
        main_layout.addWidget(splitter)
        central_widget.setLayout(main_layout)
        
        self.statusBar().showMessage('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    
    def fade_in_animation(self):
        """–ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        effect = QGraphicsOpacityEffect(self)
        self.setGraphicsEffect(effect)
        
        animation = QPropertyAnimation(effect, b"opacity")
        animation.setDuration(600)
        animation.setStartValue(0)
        animation.setEndValue(1)
        animation.setEasingCurve(QEasingCurve.Type.OutCubic)
        animation.start()
        
        self.window_animation = animation
    
    def create_menu_bar(self):
        menubar = self.menuBar()
        
        file_menu = menubar.addMenu('–§–∞–π–ª')
        
        import_action = QAction('–ò–º–ø–æ—Ä—Ç –∏–∑ CSV', self)
        import_action.triggered.connect(self.import_csv)
        file_menu.addAction(import_action)
        
        import_excel_action = QAction('–ò–º–ø–æ—Ä—Ç –∏–∑ Excel', self)
        import_excel_action.triggered.connect(self.import_excel)
        file_menu.addAction(import_excel_action)
        
        file_menu.addSeparator()
        
        export_csv_action = QAction('–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV', self)
        export_csv_action.triggered.connect(self.export_csv)
        file_menu.addAction(export_csv_action)
        
        export_excel_action = QAction('–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel', self)
        export_excel_action.triggered.connect(self.export_excel)
        file_menu.addAction(export_excel_action)
        
        export_pdf_action = QAction('–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF', self)
        export_pdf_action.triggered.connect(self.export_pdf)
        file_menu.addAction(export_pdf_action)
        
        export_json_action = QAction('–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON', self)
        export_json_action.triggered.connect(self.export_json)
        file_menu.addAction(export_json_action)
        
        file_menu.addSeparator()
        
        export_selection_action = QAction('–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–π –≤—ã–±–æ—Ä–∫–∏...', self)
        export_selection_action.triggered.connect(self.export_current_selection)
        file_menu.addAction(export_selection_action)
        
        file_menu.addSeparator()
        
        export_card_action = QAction('–≠–∫—Å–ø–æ—Ä—Ç –≤–∏–∑–∏—Ç–∫–∏ (PNG)', self)
        export_card_action.triggered.connect(self.export_business_card)
        file_menu.addAction(export_card_action)
        
        export_sheet_action = QAction('–≠–∫—Å–ø–æ—Ä—Ç –ª–∏—Å—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (PNG)', self)
        export_sheet_action.triggered.connect(self.export_contact_sheet)
        file_menu.addAction(export_sheet_action)
        
        file_menu.addSeparator()
        
        exit_action = QAction('–í—ã—Ö–æ–¥', self)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        data_menu = menubar.addMenu('–î–∞–Ω–Ω—ã–µ')
        
        add_employee_action = QAction('–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', self)
        add_employee_action.triggered.connect(self.add_employee)
        data_menu.addAction(add_employee_action)
        
        add_department_action = QAction('–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª', self)
        add_department_action.triggered.connect(self.add_department)
        data_menu.addAction(add_department_action)
        
        edit_employee_action = QAction('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', self)
        edit_employee_action.triggered.connect(self.edit_employee)
        data_menu.addAction(edit_employee_action)
        
        delete_employee_action = QAction('–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', self)
        delete_employee_action.triggered.connect(self.delete_employee)
        data_menu.addAction(delete_employee_action)
        
        duplicate_employee_action = QAction('–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', self)
        duplicate_employee_action.triggered.connect(self.duplicate_employee)
        data_menu.addAction(duplicate_employee_action)
        
        data_menu.addSeparator()
        
        delete_multiple_action = QAction('–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ', self)
        delete_multiple_action.triggered.connect(self.delete_multiple_employees)
        data_menu.addAction(delete_multiple_action)
        
        data_menu.addSeparator()
        
        advanced_search_action = QAction('–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫...', self)
        advanced_search_action.triggered.connect(self.advanced_search)
        advanced_search_action.setShortcut('Ctrl+Shift+F')
        data_menu.addAction(advanced_search_action)
        
        tools_menu = menubar.addMenu('–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')
        
        settings_action = QAction('–ù–∞—Å—Ç—Ä–æ–π–∫–∏...', self)
        settings_action.triggered.connect(self.show_settings)
        settings_action.setShortcut('Ctrl+,')
        tools_menu.addAction(settings_action)
        
        tools_menu.addSeparator()
        
        backup_action = QAction('–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ...', self)
        backup_action.triggered.connect(self.show_backup_dialog)
        tools_menu.addAction(backup_action)
        
        create_backup_action = QAction('–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é', self)
        create_backup_action.triggered.connect(self.quick_backup)
        create_backup_action.setShortcut('Ctrl+B')
        tools_menu.addAction(create_backup_action)
        
        help_menu = menubar.addMenu('–°–ø—Ä–∞–≤–∫–∞')
        
        shortcuts_action = QAction('–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏', self)
        shortcuts_action.triggered.connect(self.show_shortcuts)
        shortcuts_action.setShortcut('F1')
        help_menu.addAction(shortcuts_action)
        
        help_menu.addSeparator()
        
        about_action = QAction('–û –ø—Ä–æ–≥—Ä–∞–º–º–µ', self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
    
    def create_toolbar(self):
        toolbar = self.addToolBar('–ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤')
        toolbar.setMovable(False)
        toolbar.setIconSize(toolbar.iconSize() * 1.3)
        toolbar.setToolButtonStyle(Qt.ToolButtonStyle.ToolButtonTextBesideIcon)
        
        add_action = QAction('‚ûï –î–æ–±–∞–≤–∏—Ç—å', self)
        add_action.setToolTip('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (Ctrl+N)')
        add_action.triggered.connect(self.add_employee)
        toolbar.addAction(add_action)
        
        edit_action = QAction('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', self)
        edit_action.setToolTip('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (Ctrl+E)')
        edit_action.triggered.connect(self.edit_employee)
        toolbar.addAction(edit_action)
        
        delete_action = QAction('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', self)
        delete_action.setToolTip('–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (Del)')
        delete_action.triggered.connect(self.delete_employee)
        toolbar.addAction(delete_action)
        
        toolbar.addSeparator()
        
        refresh_action = QAction('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', self)
        refresh_action.setToolTip('–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (F5)')
        refresh_action.triggered.connect(self.load_data)
        toolbar.addAction(refresh_action)
        
        toolbar.addSeparator()
        
        export_action = QAction('üì§ –≠–∫—Å–ø–æ—Ä—Ç', self)
        export_action.setToolTip('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (Excel/CSV/PDF)')
        export_action.triggered.connect(self.show_export_menu)
        toolbar.addAction(export_action)
        
        toolbar.addSeparator()
        
        backup_action = QAction('üíæ –ë—ç–∫–∞–ø', self)
        backup_action.setToolTip('–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é (Ctrl+B)')
        backup_action.triggered.connect(self.quick_backup)
        toolbar.addAction(backup_action)
        
        settings_action = QAction('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', self)
        settings_action.setToolTip('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Ctrl+,)')
        settings_action.triggered.connect(self.show_settings)
        toolbar.addAction(settings_action)
    
    def setup_shortcuts(self):
        from PyQt6.QtGui import QShortcut, QKeySequence
        
        add_shortcut = QShortcut(QKeySequence('Ctrl+N'), self)
        add_shortcut.activated.connect(self.add_employee)
        
        edit_shortcut = QShortcut(QKeySequence('Ctrl+E'), self)
        edit_shortcut.activated.connect(self.edit_employee)
        
        delete_shortcut = QShortcut(QKeySequence('Del'), self)
        delete_shortcut.activated.connect(self.delete_employee)
        
        refresh_shortcut = QShortcut(QKeySequence('F5'), self)
        refresh_shortcut.activated.connect(self.refresh_data)
        
        search_shortcut = QShortcut(QKeySequence('Ctrl+F'), self)
        search_shortcut.activated.connect(self.focus_search)
    
    def create_left_panel(self):
        left_widget = QWidget()
        left_layout = QVBoxLayout()
        
        dept_label = QLabel('üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞')
        dept_label.setStyleSheet('''
            font-weight: bold; 
            font-size: 11pt; 
            color: white;
            background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                stop:0 #3498db, stop:1 #2980b9);
            padding: 10px;
            border-radius: 8px;
        ''')
        dept_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        left_layout.addWidget(dept_label)
        
        self.department_tree = QTreeWidget()
        self.department_tree.setHeaderLabel('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
        self.department_tree.itemClicked.connect(self.filter_by_department)
        left_layout.addWidget(self.department_tree)
        
        filter_label = QLabel('üìã –§–∏–ª—å—Ç—Ä –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:')
        filter_label.setStyleSheet('font-weight: 600; font-size: 10pt; color: #34495e; margin-top: 10px;')
        left_layout.addWidget(filter_label)
        
        self.position_filter = QComboBox()
        self.position_filter.addItem('–í—Å–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏', None)
        self.position_filter.currentIndexChanged.connect(self.apply_filters)
        left_layout.addWidget(self.position_filter)
        
        add_dept_button = QPushButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª')
        add_dept_button.setStyleSheet('''
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #27ae60, stop:1 #229954);
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #229954, stop:1 #1e8449);
            }
        ''')
        add_dept_button.clicked.connect(self.add_department)
        left_layout.addWidget(add_dept_button)
        
        left_widget.setLayout(left_layout)
        return left_widget
    
    def create_center_panel(self):
        center_widget = QWidget()
        center_layout = QVBoxLayout()
        
        search_layout = QHBoxLayout()
        search_label = QLabel('üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫:')
        search_label.setStyleSheet('font-weight: bold; font-size: 11pt; color: #2c3e50;')
        search_layout.addWidget(search_label)
        
        from PyQt6.QtWidgets import QCompleter
        from PyQt6.QtCore import QStringListModel
        
        self.search_input = ModernSearchBox()
        self.search_input.setPlaceholderText('üîç –í–≤–µ–¥–∏—Ç–µ –§–ò–û, –¥–æ–ª–∂–Ω–æ—Å—Ç—å, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email...')
        self.search_input.textChanged.connect(self.search_employees)
        
        self.search_completer = QCompleter()
        self.search_completer_model = QStringListModel()
        self.search_completer.setModel(self.search_completer_model)
        self.search_input.setCompleter(self.search_completer)
        self.update_search_completer()
        
        search_layout.addWidget(self.search_input)
        
        advanced_search_button = QPushButton('üîé –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫')
        advanced_search_button.setToolTip('–û—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (Ctrl+Shift+F)')
        advanced_search_button.clicked.connect(self.advanced_search)
        search_layout.addWidget(advanced_search_button)
        
        clear_button = QPushButton('‚úñ –û—á–∏—Å—Ç–∏—Ç—å')
        clear_button.setStyleSheet('''
            QPushButton {
                background-color: #95a5a6;
            }
            QPushButton:hover {
                background-color: #7f8c8d;
            }
        ''')
        clear_button.clicked.connect(self.clear_search)
        search_layout.addWidget(clear_button)
        
        center_layout.addLayout(search_layout)
        
        self.employee_table = QTableWidget()
        self.employee_table.setColumnCount(6)
        self.employee_table.setHorizontalHeaderLabels([
            'ID', '–§–ò–û', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–û—Ç–¥–µ–ª', '–¢–µ–ª–µ—Ñ–æ–Ω', 'Email'
        ])
        self.employee_table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        self.employee_table.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)
        self.employee_table.setSortingEnabled(True)
        self.employee_table.itemSelectionChanged.connect(self.show_employee_card)
        self.employee_table.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        self.employee_table.customContextMenuRequested.connect(self.show_context_menu)
        self.employee_table.doubleClicked.connect(self.on_table_double_click)
        
        self.employee_table.setColumnWidth(0, 50)
        self.employee_table.setColumnWidth(1, 200)
        self.employee_table.setColumnWidth(2, 150)
        self.employee_table.setColumnWidth(3, 150)
        self.employee_table.setColumnWidth(4, 120)
        self.employee_table.setColumnWidth(5, 180)
        
        center_layout.addWidget(self.employee_table)
        
        center_widget.setLayout(center_layout)
        center_widget.setObjectName("centerPanel")
        return center_widget
    
    def apply_modern_styles(self):
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
        self.setStyleSheet(get_main_stylesheet() + """
            #centerPanel {
                background-color: white;
                border-radius: 10px;
                padding: 10px;
            }
            
            QTableWidget::item:hover {
                background-color: #e3f2fd;
            }
            
            QGroupBox {
                background-color: white;
                border: 2px solid #e1e8ed;
                border-radius: 10px;
                margin-top: 15px;
                padding-top: 20px;
                font-weight: bold;
                font-size: 11pt;
            }
            
            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top left;
                padding: 5px 15px;
                background-color: #2196F3;
                color: white;
                border-radius: 5px;
                margin-left: 10px;
            }
        """)
    
    def load_data(self):
        cached_employees = self.cache.get_employees()
        if cached_employees is not None:
            self.current_employees = cached_employees
        else:
            self.current_employees = self.database.get_all_employees()
            self.cache.set_employees(self.current_employees)
        
        self.populate_table(self.current_employees)
        self.load_departments()
        self.load_positions()
        self.statistics_widget.update_statistics()
        self.statusBar().showMessage(f'–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(self.current_employees)}')
    
    def populate_table(self, employees):
        self.employee_table.setRowCount(0)
        
        for employee in employees:
            row = self.employee_table.rowCount()
            self.employee_table.insertRow(row)
            
            self.employee_table.setItem(row, 0, QTableWidgetItem(str(employee.id)))
            
            full_name = f"{employee.last_name} {employee.first_name}"
            if employee.middle_name:
                full_name += f" {employee.middle_name}"
            self.employee_table.setItem(row, 1, QTableWidgetItem(full_name))
            
            self.employee_table.setItem(row, 2, QTableWidgetItem(employee.position or '-'))
            
            department_name = '-'
            if employee.department_id:
                dept = self.database.get_department(employee.department_id)
                if dept:
                    department_name = dept.name
            self.employee_table.setItem(row, 3, QTableWidgetItem(department_name))
            
            phone = employee.work_phone or employee.mobile_phone or '-'
            self.employee_table.setItem(row, 4, QTableWidgetItem(phone))
            
            self.employee_table.setItem(row, 5, QTableWidgetItem(employee.email or '-'))
    
    def load_departments(self):
        self.department_tree.clear()
        departments = self.database.get_all_departments()
        
        all_item = QTreeWidgetItem(self.department_tree, ['–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'])
        all_item.setData(0, Qt.ItemDataRole.UserRole, None)
        
        root_departments = [d for d in departments if d.parent_id is None]
        
        for dept in root_departments:
            self.add_department_to_tree(dept, all_item, departments)
        
        self.department_tree.expandAll()
    
    def add_department_to_tree(self, department, parent_item, all_departments):
        item = QTreeWidgetItem(parent_item, [department.name])
        item.setData(0, Qt.ItemDataRole.UserRole, department.id)
        
        child_departments = [d for d in all_departments if d.parent_id == department.id]
        for child in child_departments:
            self.add_department_to_tree(child, item, all_departments)
    
    def load_positions(self):
        self.position_filter.clear()
        self.position_filter.addItem('–í—Å–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏', None)
        
        positions = set()
        for emp in self.database.get_all_employees():
            if emp.position:
                positions.add(emp.position)
        
        for position in sorted(positions):
            self.position_filter.addItem(position, position)
    
    def filter_by_department(self, item):
        department_id = item.data(0, Qt.ItemDataRole.UserRole)
        
        if department_id is None:
            self.current_employees = self.database.get_all_employees()
        else:
            self.current_employees = self.database.filter_employees(department_id=department_id)
        
        self.populate_table(self.current_employees)
    
    def apply_filters(self):
        position = self.position_filter.currentData()
        
        if position:
            self.current_employees = self.database.filter_employees(position=position)
        else:
            self.current_employees = self.database.get_all_employees()
        
        self.populate_table(self.current_employees)
    
    def search_employees(self):
        query = self.search_input.text().strip()
        
        if not query:
            self.load_data()
            return
        
        if len(query) >= 3:
            self.settings_manager.add_search_to_history(query)
            self.update_search_completer()
        
        self.current_employees = self.database.search_employees(query)
        self.populate_table(self.current_employees)
        self.statusBar().showMessage(f'–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(self.current_employees)}', 3000)
    
    def clear_search(self):
        self.search_input.clear()
        self.load_data()
    
    def update_search_completer(self):
        history = self.settings_manager.get_search_history()
        self.search_completer_model.setStringList(history)
    
    def advanced_search(self):
        dialog = AdvancedSearchDialog(self.database)
        if dialog.exec():
            criteria = dialog.get_search_criteria()
            
            if not criteria:
                QMessageBox.information(self, '–ü–æ–∏—Å–∫', '–ù–µ —É–∫–∞–∑–∞–Ω—ã –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞')
                return
            
            employees = self.database.get_all_employees()
            filtered_employees = []
            
            for emp in employees:
                match = True
                
                if 'fio' in criteria:
                    full_name = f"{emp.last_name} {emp.first_name} {emp.middle_name or ''}".lower()
                    if criteria['fio'].lower() not in full_name:
                        match = False
                
                if 'department_id' in criteria and emp.department_id != criteria['department_id']:
                    match = False
                
                if 'position' in criteria and emp.position:
                    if criteria['position'].lower() not in emp.position.lower():
                        match = False
                
                if 'email' in criteria and emp.email:
                    if criteria['email'].lower() not in emp.email.lower():
                        match = False
                
                if 'phone' in criteria:
                    phone_match = False
                    if emp.work_phone and criteria['phone'] in emp.work_phone:
                        phone_match = True
                    if emp.mobile_phone and criteria['phone'] in emp.mobile_phone:
                        phone_match = True
                    if not phone_match:
                        match = False
                
                if 'skills' in criteria and emp.skills:
                    if criteria['skills'].lower() not in emp.skills.lower():
                        match = False
                
                if 'hire_date_from' in criteria and emp.hire_date:
                    if str(emp.hire_date) < criteria['hire_date_from']:
                        match = False
                
                if 'hire_date_to' in criteria and emp.hire_date:
                    if str(emp.hire_date) > criteria['hire_date_to']:
                        match = False
                
                if 'has_photo' in criteria and not emp.photo:
                    match = False
                
                if match:
                    filtered_employees.append(emp)
            
            self.current_employees = filtered_employees
            self.populate_table(filtered_employees)
            self.statusBar().showMessage(f'–ù–∞–π–¥–µ–Ω–æ: {len(filtered_employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤')
            
            if not filtered_employees:
                QMessageBox.information(self, '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    
    def show_employee_card(self):
        selected_rows = self.employee_table.selectedItems()
        if not selected_rows:
            return
        
        row = self.employee_table.currentRow()
        employee_id = int(self.employee_table.item(row, 0).text())
        
        employee = self.database.get_employee(employee_id)
        if employee:
            while self.employee_card_layout.count():
                item = self.employee_card_layout.takeAt(0)
                if item.widget():
                    item.widget().deleteLater()
            
            card = EmployeeCard(employee, self.database)
            card.call_requested.connect(self.make_call)
            card.email_requested.connect(self.send_email)
            card.qr_requested.connect(self.generate_qr)
            
            # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
            card.setGraphicsEffect(QGraphicsOpacityEffect(card))
            card.graphicsEffect().setOpacity(0)
            
            self.employee_card_layout.addWidget(card)
            
            # –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
            fade_animation = QPropertyAnimation(card.graphicsEffect(), b"opacity")
            fade_animation.setDuration(400)
            fade_animation.setStartValue(0)
            fade_animation.setEndValue(1)
            fade_animation.setEasingCurve(QEasingCurve.Type.OutCubic)
            fade_animation.start()
    
    def add_employee(self):
        if not self.auth_manager.has_permission('add'):
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!')
            return
        
        dialog = AddEditEmployeeDialog(self.database)
        if dialog.exec():
            self.cache.invalidate_employees()
            self.load_data()
            QMessageBox.information(self, '–£—Å–ø–µ—Ö', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
    
    def edit_employee(self):
        if not self.auth_manager.has_permission('edit'):
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!')
            return
        
        selected_rows = self.employee_table.selectedItems()
        if not selected_rows:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!')
            return
        
        row = self.employee_table.currentRow()
        employee_id = int(self.employee_table.item(row, 0).text())
        
        employee = self.database.get_employee(employee_id)
        if employee:
            dialog = AddEditEmployeeDialog(self.database, employee)
            if dialog.exec():
                self.cache.invalidate_employees()
                self.load_data()
                QMessageBox.information(self, '–£—Å–ø–µ—Ö', '–î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
    
    def delete_employee(self):
        if not self.auth_manager.has_permission('edit'):
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!')
            return
        
        selected_rows = self.employee_table.selectedItems()
        if not selected_rows:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!')
            return
        
        reply = QMessageBox.question(
            self, 
            '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?',
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            row = self.employee_table.currentRow()
            employee_id = int(self.employee_table.item(row, 0).text())
            
            self.database.delete_employee(employee_id)
            self.cache.invalidate_employees()
            self.load_data()
            QMessageBox.information(self, '–£—Å–ø–µ—Ö', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª–µ–Ω!')
    
    def add_department(self):
        if not self.auth_manager.has_permission('add'):
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–æ–≤!')
            return
        
        dialog = AddDepartmentDialog(self.database)
        if dialog.exec():
            self.load_departments()
            QMessageBox.information(self, '–£—Å–ø–µ—Ö', '–û—Ç–¥–µ–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
    
    def import_csv(self):
        if not self.auth_manager.has_permission('add'):
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö!')
            return
        
        filename, _ = QFileDialog.getOpenFileName(
            self, 
            '–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª', 
            '', 
            'CSV —Ñ–∞–π–ª—ã (*.csv)'
        )
        
        if filename:
            try:
                count = self.export_import.import_from_csv(filename)
                self.cache.invalidate_employees()
                self.load_data()
                QMessageBox.information(self, '–£—Å–ø–µ—Ö', f'–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {count}')
            except Exception as e:
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}')
    
    def import_excel(self):
        if not self.auth_manager.has_permission('add'):
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö!')
            return
        
        filename, _ = QFileDialog.getOpenFileName(
            self, 
            '–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª', 
            '', 
            'Excel —Ñ–∞–π–ª—ã (*.xlsx *.xls)'
        )
        
        if filename:
            try:
                count = self.export_import.import_from_excel(filename)
                self.cache.invalidate_employees()
                self.load_data()
                QMessageBox.information(self, '–£—Å–ø–µ—Ö', f'–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {count}')
            except Exception as e:
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}')
    
    def export_csv(self):
        filename, _ = QFileDialog.getSaveFileName(
            self, 
            '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV —Ñ–∞–π–ª', 
            '', 
            'CSV —Ñ–∞–π–ª—ã (*.csv)'
        )
        
        if filename:
            try:
                self.export_import.export_to_csv(filename, self.current_employees)
                QMessageBox.information(self, '–£—Å–ø–µ—Ö', '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!')
            except Exception as e:
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}')
    
    def export_excel(self):
        filename, _ = QFileDialog.getSaveFileName(
            self, 
            '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å Excel —Ñ–∞–π–ª', 
            '', 
            'Excel —Ñ–∞–π–ª—ã (*.xlsx)'
        )
        
        if filename:
            try:
                self.export_import.export_to_excel(filename, self.current_employees)
                QMessageBox.information(self, '–£—Å–ø–µ—Ö', '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!')
            except Exception as e:
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}')
    
    def export_pdf(self):
        filename, _ = QFileDialog.getSaveFileName(
            self, 
            '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF —Ñ–∞–π–ª', 
            '', 
            'PDF —Ñ–∞–π–ª—ã (*.pdf)'
        )
        
        if filename:
            try:
                self.export_import.export_to_pdf(filename, self.current_employees)
                QMessageBox.information(self, '–£—Å–ø–µ—Ö', '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!')
            except Exception as e:
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}')
    
    def export_business_card(self):
        selected_rows = self.employee_table.selectedItems()
        if not selected_rows:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–∏–∑–∏—Ç–∫–∏!')
            return
        
        row = self.employee_table.currentRow()
        employee_id = int(self.employee_table.item(row, 0).text())
        employee = self.database.get_employee(employee_id)
        
        if employee:
            filename, _ = QFileDialog.getSaveFileName(
                self,
                '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–∑–∏—Ç–∫—É',
                f'card_{employee.last_name}_{employee.first_name}.png',
                'PNG —Ñ–∞–π–ª—ã (*.png)'
            )
            
            if filename:
                try:
                    card_data = self.card_generator.generate_business_card(employee, include_qr=True)
                    with open(filename, 'wb') as f:
                        f.write(card_data)
                    QMessageBox.information(self, '–£—Å–ø–µ—Ö', '–í–∏–∑–∏—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!')
                except Exception as e:
                    QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑–∏—Ç–∫—É: {str(e)}')
    
    def export_contact_sheet(self):
        if not self.current_employees:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞!')
            return
        
        filename, _ = QFileDialog.getSaveFileName(
            self,
            '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏—Å—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤',
            'contacts_sheet.png',
            'PNG —Ñ–∞–π–ª—ã (*.png)'
        )
        
        if filename:
            try:
                sheet_data = self.card_generator.generate_contact_sheet(
                    self.current_employees[:30],
                    '–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'
                )
                with open(filename, 'wb') as f:
                    f.write(sheet_data)
                QMessageBox.information(self, '–£—Å–ø–µ—Ö', f'–õ–∏—Å—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {min(len(self.current_employees), 30)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤')
            except Exception as e:
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {str(e)}')
    
    def make_call(self, phone_number):
        QMessageBox.information(
            self, 
            '–ó–≤–æ–Ω–æ–∫', 
            f'–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –∑–≤–æ–Ω–æ–∫ –Ω–∞ –Ω–æ–º–µ—Ä: {phone_number}\n\n–î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∏–µ–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.'
        )
    
    def send_email(self, email):
        try:
            webbrowser.open(f'mailto:{email}')
        except Exception:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç!')
    
    def generate_qr(self, employee):
        try:
            qr_data = self.qr_generator.generate_qr_code(employee)
            
            filename, _ = QFileDialog.getSaveFileName(
                self, 
                '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å QR-–∫–æ–¥', 
                f'qr_{employee.last_name}_{employee.first_name}.png', 
                'PNG —Ñ–∞–π–ª—ã (*.png)'
            )
            
            if filename:
                with open(filename, 'wb') as f:
                    f.write(qr_data)
                
                QMessageBox.information(self, '–£—Å–ø–µ—Ö', 'QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥: {str(e)}')
    
    def show_context_menu(self, position):
        menu = QMenu()
        
        edit_action = menu.addAction("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        delete_action = menu.addAction("–£–¥–∞–ª–∏—Ç—å")
        menu.addSeparator()
        export_vcard_action = menu.addAction("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ vCard")
        
        action = menu.exec(self.employee_table.mapToGlobal(position))
        
        if action == edit_action:
            self.edit_employee()
        elif action == delete_action:
            self.delete_employee()
        elif action == export_vcard_action:
            self.export_vcard()
    
    def export_vcard(self):
        selected_rows = self.employee_table.selectedItems()
        if not selected_rows:
            return
        
        row = self.employee_table.currentRow()
        employee_id = int(self.employee_table.item(row, 0).text())
        
        employee = self.database.get_employee(employee_id)
        if employee:
            filename, _ = QFileDialog.getSaveFileName(
                self, 
                '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å vCard', 
                f'{employee.last_name}_{employee.first_name}.vcf', 
                'vCard —Ñ–∞–π–ª—ã (*.vcf)'
            )
            
            if filename:
                try:
                    self.export_import.export_to_vcard(filename, employee)
                    QMessageBox.information(self, '–£—Å–ø–µ—Ö', 'vCard —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
                except Exception as e:
                    QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å vCard: {str(e)}')
    
    def check_birthdays(self):
        current_month = datetime.now().month
        birthday_employees = self.database.get_employees_by_birthday_month(current_month)
        
        if birthday_employees:
            message = f"–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —É {len(birthday_employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n"
            for emp in birthday_employees[:5]:
                full_name = f"{emp.last_name} {emp.first_name}"
                message += f"‚Ä¢ {full_name} - {emp.birth_date}\n"
            
            if len(birthday_employees) > 5:
                message += f"\n... –∏ –µ—â–µ {len(birthday_employees) - 5}"
            
            QMessageBox.information(self, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è', message)
    
    def export_json(self):
        filename, _ = QFileDialog.getSaveFileName(
            self,
            '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON —Ñ–∞–π–ª',
            '',
            'JSON —Ñ–∞–π–ª—ã (*.json)'
        )
        
        if filename:
            try:
                self.json_exporter.export_employees(self.current_employees, filename)
                QMessageBox.information(self, '–£—Å–ø–µ—Ö', f'–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(self.current_employees)}')
            except Exception as e:
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}')
    
    def duplicate_employee(self):
        if not self.auth_manager.has_permission('add'):
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!')
            return
        
        selected_row = self.employee_table.currentRow()
        if selected_row < 0:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è!')
            return
        
        employee_id = int(self.employee_table.item(selected_row, 0).text())
        original_employee = self.database.get_employee(employee_id)
        
        reply = QMessageBox.question(
            self,
            '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            f'–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {original_employee.last_name} {original_employee.first_name}?',
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            new_employee = Employee(
                id=None,
                last_name=original_employee.last_name + ' (–∫–æ–ø–∏—è)',
                first_name=original_employee.first_name,
                middle_name=original_employee.middle_name,
                department_id=original_employee.department_id,
                position=original_employee.position,
                work_phone=original_employee.work_phone,
                mobile_phone=original_employee.mobile_phone,
                email=original_employee.email,
                birth_date=original_employee.birth_date,
                hire_date=original_employee.hire_date,
                photo=original_employee.photo,
                room=original_employee.room,
                skills=original_employee.skills,
                manager_id=original_employee.manager_id,
                work_schedule=original_employee.work_schedule,
                telegram=original_employee.telegram,
                whatsapp=original_employee.whatsapp,
                skype=original_employee.skype
            )
            
            self.database.add_employee(new_employee)
            self.cache.invalidate_employees()
            self.load_data()
            QMessageBox.information(self, '–£—Å–ø–µ—Ö', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω!')
    
    def delete_multiple_employees(self):
        if not self.auth_manager.has_permission('delete'):
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!')
            return
        
        selected_items = self.employee_table.selectedItems()
        if not selected_items:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!')
            return
        
        selected_rows = set(item.row() for item in selected_items)
        
        reply = QMessageBox.question(
            self,
            '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            f'–£–¥–∞–ª–∏—Ç—å {len(selected_rows)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤?',
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            for row in sorted(selected_rows, reverse=True):
                employee_id = int(self.employee_table.item(row, 0).text())
                self.database.delete_employee(employee_id)
            
            self.cache.invalidate_employees()
            self.load_data()
            QMessageBox.information(self, '–£—Å–ø–µ—Ö', f'–£–¥–∞–ª–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(selected_rows)}')
    
    def show_context_menu(self, position):
        menu = QMenu()
        
        edit_action = menu.addAction('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
        edit_action.triggered.connect(self.edit_employee)
        
        duplicate_action = menu.addAction('üìã –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å')
        duplicate_action.triggered.connect(self.duplicate_employee)
        
        menu.addSeparator()
        
        export_vcard_action = menu.addAction('üíæ –≠–∫—Å–ø–æ—Ä—Ç vCard')
        export_vcard_action.triggered.connect(self.export_selected_vcard)
        
        export_png_action = menu.addAction('üñºÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –≤–∏–∑–∏—Ç–∫–∞ PNG')
        export_png_action.triggered.connect(self.export_business_card)
        
        menu.addSeparator()
        
        delete_action = menu.addAction('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å')
        delete_action.triggered.connect(self.delete_employee)
        
        menu.exec(self.employee_table.viewport().mapToGlobal(position))
    
    def on_table_double_click(self):
        self.edit_employee()
    
    def refresh_data(self):
        self.cache.invalidate_all()
        self.load_data()
        self.statusBar().showMessage('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 3000)
    
    def focus_search(self):
        self.search_input.setFocus()
        self.search_input.selectAll()
    
    def show_settings(self):
        dialog = SettingsDialog(self.settings_manager, self)
        dialog.exec()
    
    def show_backup_dialog(self):
        dialog = BackupDialog(self.backup_manager, self)
        dialog.exec()
    
    def quick_backup(self):
        try:
            backup_path = self.backup_manager.create_backup(f'–†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ {datetime.now().strftime("%Y-%m-%d %H:%M")}')
            self.statusBar().showMessage(f'–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}', 5000)
            QMessageBox.information(self, '–£—Å–ø–µ—Ö', f'–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞:\n{backup_path}')
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é:\n{str(e)}')
    
    def export_selected_vcard(self):
        selected_row = self.employee_table.currentRow()
        if selected_row < 0:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!')
            return
        
        employee_id = int(self.employee_table.item(selected_row, 0).text())
        employee = self.database.get_employee(employee_id)
        
        if employee:
            filename, _ = QFileDialog.getSaveFileName(
                self,
                '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å vCard',
                f'{employee.last_name}_{employee.first_name}.vcf',
                'vCard —Ñ–∞–π–ª—ã (*.vcf)'
            )
            
            if filename:
                try:
                    self.export_import.export_to_vcard(filename, employee)
                    QMessageBox.information(self, '–£—Å–ø–µ—Ö', 'vCard —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
                except Exception as e:
                    QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å vCard: {str(e)}')
    
    def export_current_selection(self):
        if not self.current_employees:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞!')
            return
        
        from PyQt6.QtWidgets import QInputDialog
        
        formats = ['CSV', 'Excel', 'JSON']
        format_choice, ok = QInputDialog.getItem(
            self,
            '–í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞',
            f'–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ ({len(self.current_employees)} –∑–∞–ø–∏—Å–µ–π):',
            formats,
            0,
            False
        )
        
        if not ok:
            return
        
        if format_choice == 'CSV':
            filename, _ = QFileDialog.getSaveFileName(
                self,
                '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV —Ñ–∞–π–ª',
                f'–≤—ã–±–æ—Ä–∫–∞_{len(self.current_employees)}_–∑–∞–ø–∏—Å–µ–π.csv',
                'CSV —Ñ–∞–π–ª—ã (*.csv)'
            )
            if filename:
                try:
                    self.export_import.export_to_csv(filename, self.current_employees)
                    QMessageBox.information(self, '–£—Å–ø–µ—Ö', f'–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(self.current_employees)}')
                except Exception as e:
                    QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {str(e)}')
        
        elif format_choice == 'Excel':
            filename, _ = QFileDialog.getSaveFileName(
                self,
                '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å Excel —Ñ–∞–π–ª',
                f'–≤—ã–±–æ—Ä–∫–∞_{len(self.current_employees)}_–∑–∞–ø–∏—Å–µ–π.xlsx',
                'Excel —Ñ–∞–π–ª—ã (*.xlsx)'
            )
            if filename:
                try:
                    self.export_import.export_to_excel(filename, self.current_employees)
                    QMessageBox.information(self, '–£—Å–ø–µ—Ö', f'–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(self.current_employees)}')
                except Exception as e:
                    QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {str(e)}')
        
        elif format_choice == 'JSON':
            filename, _ = QFileDialog.getSaveFileName(
                self,
                '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON —Ñ–∞–π–ª',
                f'–≤—ã–±–æ—Ä–∫–∞_{len(self.current_employees)}_–∑–∞–ø–∏—Å–µ–π.json',
                'JSON —Ñ–∞–π–ª—ã (*.json)'
            )
            if filename:
                try:
                    self.json_exporter.export_employees(self.current_employees, filename)
                    QMessageBox.information(self, '–£—Å–ø–µ—Ö', f'–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(self.current_employees)}')
                except Exception as e:
                    QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {str(e)}')
    
    def show_export_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        from PyQt6.QtWidgets import QMenu
        
        menu = QMenu(self)
        
        csv_action = menu.addAction('üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV')
        csv_action.triggered.connect(self.export_csv)
        
        excel_action = menu.addAction('üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel')
        excel_action.triggered.connect(self.export_excel)
        
        pdf_action = menu.addAction('üìë –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF')
        pdf_action.triggered.connect(self.export_pdf)
        
        menu.addSeparator()
        
        json_action = menu.addAction('üì¶ –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON')
        json_action.triggered.connect(self.export_json)
        
        menu.addSeparator()
        
        current_action = menu.addAction('üìã –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–π –≤—ã–±–æ—Ä–∫–∏')
        current_action.triggered.connect(self.export_current_selection)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞
        menu.exec(self.mapToGlobal(self.rect().center()))
    
    def show_shortcuts(self):
        shortcuts_text = """
<h3>–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏</h3>
<table border="1" cellpadding="5" cellspacing="0">
<tr><th>–ö–ª–∞–≤–∏—à–∞</th><th>–î–µ–π—Å—Ç–≤–∏–µ</th></tr>
<tr><td><b>Ctrl+N</b></td><td>–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</td></tr>
<tr><td><b>Ctrl+E</b></td><td>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</td></tr>
<tr><td><b>Del</b></td><td>–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</td></tr>
<tr><td><b>Ctrl+F</b></td><td>–ü–æ–∏—Å–∫ (—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ)</td></tr>
<tr><td><b>Ctrl+Shift+F</b></td><td>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫</td></tr>
<tr><td><b>F5</b></td><td>–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</td></tr>
<tr><td><b>Ctrl+B</b></td><td>–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é</td></tr>
<tr><td><b>Ctrl+,</b></td><td>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</td></tr>
<tr><td><b>F1</b></td><td>–°–ø—Ä–∞–≤–∫–∞ (–≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏)</td></tr>
<tr><td><b>–î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫</b></td><td>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å</td></tr>
<tr><td><b>–ü—Ä–∞–≤—ã–π –∫–ª–∏–∫</b></td><td>–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é</td></tr>
</table>
<p><b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤)</p>
"""
        QMessageBox.information(self, '–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏', shortcuts_text)
    
    def show_about(self):
        QMessageBox.about(
            self,
            '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ',
            '<h3>–ö–∞—Ç–∞–ª–æ–≥ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</h3>'
            '<p>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.</p>'
            '<p><b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b> –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏, –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é, –ù–∞—Å—Ç—Ä–æ–π–∫–∏, –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞</p>'
            '<p><b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b> Python, PyQt6, SQLite</p>'
            '<p><b>–§—É–Ω–∫—Ü–∏–∏:</b></p>'
            '<ul>'
            '<li>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</li>'
            '<li>–ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è</li>'
            '<li>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞</li>'
            '<li>–ò–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</li>'
            '<li>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–æ–≤</li>'
            '<li>–†–∞–∑–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞</li>'
            '</ul>'
        )

